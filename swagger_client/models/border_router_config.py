# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BorderRouterConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pan_id': 'int',
        'pan_size': 'int',
        'use_parent_bcast_sched': 'bool',
        'routing_method': 'int',
        'network_name': 'str',
        'six_lowpan_mtu': 'int'
    }

    attribute_map = {
        'pan_id': 'panId',
        'pan_size': 'panSize',
        'use_parent_bcast_sched': 'useParentBcastSched',
        'routing_method': 'routingMethod',
        'network_name': 'networkName',
        'six_lowpan_mtu': 'sixLowpanMtu'
    }

    def __init__(self, pan_id=None, pan_size=None, use_parent_bcast_sched=None, routing_method=None, network_name=None, six_lowpan_mtu=None):  # noqa: E501
        """BorderRouterConfig - a model defined in Swagger"""  # noqa: E501

        self._pan_id = None
        self._pan_size = None
        self._use_parent_bcast_sched = None
        self._routing_method = None
        self._network_name = None
        self._six_lowpan_mtu = None
        self.discriminator = None

        self.pan_id = pan_id
        self.pan_size = pan_size
        self.use_parent_bcast_sched = use_parent_bcast_sched
        self.routing_method = routing_method
        self.network_name = network_name
        if six_lowpan_mtu is not None:
            self.six_lowpan_mtu = six_lowpan_mtu

    @property
    def pan_id(self):
        """Gets the pan_id of this BorderRouterConfig.  # noqa: E501

        Set as specified in TPS PAN Advertisement frame description.  # noqa: E501

        :return: The pan_id of this BorderRouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._pan_id

    @pan_id.setter
    def pan_id(self, pan_id):
        """Sets the pan_id of this BorderRouterConfig.

        Set as specified in TPS PAN Advertisement frame description.  # noqa: E501

        :param pan_id: The pan_id of this BorderRouterConfig.  # noqa: E501
        :type: int
        """
        if pan_id is None:
            raise ValueError("Invalid value for `pan_id`, must not be `None`")  # noqa: E501

        self._pan_id = pan_id

    @property
    def pan_size(self):
        """Gets the pan_size of this BorderRouterConfig.  # noqa: E501

        Set as specified in TPS PAN-IE description.  # noqa: E501

        :return: The pan_size of this BorderRouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._pan_size

    @pan_size.setter
    def pan_size(self, pan_size):
        """Sets the pan_size of this BorderRouterConfig.

        Set as specified in TPS PAN-IE description.  # noqa: E501

        :param pan_size: The pan_size of this BorderRouterConfig.  # noqa: E501
        :type: int
        """
        if pan_size is None:
            raise ValueError("Invalid value for `pan_size`, must not be `None`")  # noqa: E501

        self._pan_size = pan_size

    @property
    def use_parent_bcast_sched(self):
        """Gets the use_parent_bcast_sched of this BorderRouterConfig.  # noqa: E501

        Set as specified in TPS PAN-IE description.  # noqa: E501

        :return: The use_parent_bcast_sched of this BorderRouterConfig.  # noqa: E501
        :rtype: bool
        """
        return self._use_parent_bcast_sched

    @use_parent_bcast_sched.setter
    def use_parent_bcast_sched(self, use_parent_bcast_sched):
        """Sets the use_parent_bcast_sched of this BorderRouterConfig.

        Set as specified in TPS PAN-IE description.  # noqa: E501

        :param use_parent_bcast_sched: The use_parent_bcast_sched of this BorderRouterConfig.  # noqa: E501
        :type: bool
        """
        if use_parent_bcast_sched is None:
            raise ValueError("Invalid value for `use_parent_bcast_sched`, must not be `None`")  # noqa: E501

        self._use_parent_bcast_sched = use_parent_bcast_sched

    @property
    def routing_method(self):
        """Gets the routing_method of this BorderRouterConfig.  # noqa: E501

        Set as specified in TPS PAN-IE description.  # noqa: E501

        :return: The routing_method of this BorderRouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._routing_method

    @routing_method.setter
    def routing_method(self, routing_method):
        """Sets the routing_method of this BorderRouterConfig.

        Set as specified in TPS PAN-IE description.  # noqa: E501

        :param routing_method: The routing_method of this BorderRouterConfig.  # noqa: E501
        :type: int
        """
        if routing_method is None:
            raise ValueError("Invalid value for `routing_method`, must not be `None`")  # noqa: E501

        self._routing_method = routing_method

    @property
    def network_name(self):
        """Gets the network_name of this BorderRouterConfig.  # noqa: E501

        Set as specified in TPS NETNAME-IE description.  # noqa: E501

        :return: The network_name of this BorderRouterConfig.  # noqa: E501
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this BorderRouterConfig.

        Set as specified in TPS NETNAME-IE description.  # noqa: E501

        :param network_name: The network_name of this BorderRouterConfig.  # noqa: E501
        :type: str
        """
        if network_name is None:
            raise ValueError("Invalid value for `network_name`, must not be `None`")  # noqa: E501

        self._network_name = network_name

    @property
    def six_lowpan_mtu(self):
        """Gets the six_lowpan_mtu of this BorderRouterConfig.  # noqa: E501

        The 6LoWPAN MTU to be used by this router.  # noqa: E501

        :return: The six_lowpan_mtu of this BorderRouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._six_lowpan_mtu

    @six_lowpan_mtu.setter
    def six_lowpan_mtu(self, six_lowpan_mtu):
        """Sets the six_lowpan_mtu of this BorderRouterConfig.

        The 6LoWPAN MTU to be used by this router.  # noqa: E501

        :param six_lowpan_mtu: The six_lowpan_mtu of this BorderRouterConfig.  # noqa: E501
        :type: int
        """

        self._six_lowpan_mtu = six_lowpan_mtu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BorderRouterConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BorderRouterConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
