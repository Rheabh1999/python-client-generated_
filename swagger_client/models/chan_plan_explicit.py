# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChanPlanExplicit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ch0': 'int',
        'chan_spacing': 'int',
        'num_chans': 'int'
    }

    attribute_map = {
        'ch0': 'ch0',
        'chan_spacing': 'chanSpacing',
        'num_chans': 'numChans'
    }

    def __init__(self, ch0=None, chan_spacing=None, num_chans=None):  # noqa: E501
        """ChanPlanExplicit - a model defined in Swagger"""  # noqa: E501

        self._ch0 = None
        self._chan_spacing = None
        self._num_chans = None
        self.discriminator = None

        self.ch0 = ch0
        self.chan_spacing = chan_spacing
        self.num_chans = num_chans

    @property
    def ch0(self):
        """Gets the ch0 of this ChanPlanExplicit.  # noqa: E501

        Set as specified in TPS US-IE description.  # noqa: E501

        :return: The ch0 of this ChanPlanExplicit.  # noqa: E501
        :rtype: int
        """
        return self._ch0

    @ch0.setter
    def ch0(self, ch0):
        """Sets the ch0 of this ChanPlanExplicit.

        Set as specified in TPS US-IE description.  # noqa: E501

        :param ch0: The ch0 of this ChanPlanExplicit.  # noqa: E501
        :type: int
        """
        if ch0 is None:
            raise ValueError("Invalid value for `ch0`, must not be `None`")  # noqa: E501

        self._ch0 = ch0

    @property
    def chan_spacing(self):
        """Gets the chan_spacing of this ChanPlanExplicit.  # noqa: E501

        Set as specified in TPS US-IE description.  # noqa: E501

        :return: The chan_spacing of this ChanPlanExplicit.  # noqa: E501
        :rtype: int
        """
        return self._chan_spacing

    @chan_spacing.setter
    def chan_spacing(self, chan_spacing):
        """Sets the chan_spacing of this ChanPlanExplicit.

        Set as specified in TPS US-IE description.  # noqa: E501

        :param chan_spacing: The chan_spacing of this ChanPlanExplicit.  # noqa: E501
        :type: int
        """
        if chan_spacing is None:
            raise ValueError("Invalid value for `chan_spacing`, must not be `None`")  # noqa: E501

        self._chan_spacing = chan_spacing

    @property
    def num_chans(self):
        """Gets the num_chans of this ChanPlanExplicit.  # noqa: E501

        Set as specified in TPS US-IE description.  # noqa: E501

        :return: The num_chans of this ChanPlanExplicit.  # noqa: E501
        :rtype: int
        """
        return self._num_chans

    @num_chans.setter
    def num_chans(self, num_chans):
        """Sets the num_chans of this ChanPlanExplicit.

        Set as specified in TPS US-IE description.  # noqa: E501

        :param num_chans: The num_chans of this ChanPlanExplicit.  # noqa: E501
        :type: int
        """
        if num_chans is None:
            raise ValueError("Invalid value for `num_chans`, must not be `None`")  # noqa: E501

        self._num_chans = num_chans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChanPlanExplicit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChanPlanExplicit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
