# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GroupTransientKeys(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gtk0': 'str',
        'gtk1': 'str',
        'gtk2': 'str',
        'gtk3': 'str'
    }

    attribute_map = {
        'gtk0': 'gtk0',
        'gtk1': 'gtk1',
        'gtk2': 'gtk2',
        'gtk3': 'gtk3'
    }

    def __init__(self, gtk0=None, gtk1=None, gtk2=None, gtk3=None):  # noqa: E501
        """GroupTransientKeys - a model defined in Swagger"""  # noqa: E501

        self._gtk0 = None
        self._gtk1 = None
        self._gtk2 = None
        self._gtk3 = None
        self.discriminator = None

        if gtk0 is not None:
            self.gtk0 = gtk0
        if gtk1 is not None:
            self.gtk1 = gtk1
        if gtk2 is not None:
            self.gtk2 = gtk2
        if gtk3 is not None:
            self.gtk3 = gtk3

    @property
    def gtk0(self):
        """Gets the gtk0 of this GroupTransientKeys.  # noqa: E501

        Group Transient Key 0 (PAN wide)  # noqa: E501

        :return: The gtk0 of this GroupTransientKeys.  # noqa: E501
        :rtype: str
        """
        return self._gtk0

    @gtk0.setter
    def gtk0(self, gtk0):
        """Sets the gtk0 of this GroupTransientKeys.

        Group Transient Key 0 (PAN wide)  # noqa: E501

        :param gtk0: The gtk0 of this GroupTransientKeys.  # noqa: E501
        :type: str
        """

        self._gtk0 = gtk0

    @property
    def gtk1(self):
        """Gets the gtk1 of this GroupTransientKeys.  # noqa: E501

        Group Transient Key 1 (PAN wide)  # noqa: E501

        :return: The gtk1 of this GroupTransientKeys.  # noqa: E501
        :rtype: str
        """
        return self._gtk1

    @gtk1.setter
    def gtk1(self, gtk1):
        """Sets the gtk1 of this GroupTransientKeys.

        Group Transient Key 1 (PAN wide)  # noqa: E501

        :param gtk1: The gtk1 of this GroupTransientKeys.  # noqa: E501
        :type: str
        """

        self._gtk1 = gtk1

    @property
    def gtk2(self):
        """Gets the gtk2 of this GroupTransientKeys.  # noqa: E501

        Group Transient Key 2 (PAN wide)  # noqa: E501

        :return: The gtk2 of this GroupTransientKeys.  # noqa: E501
        :rtype: str
        """
        return self._gtk2

    @gtk2.setter
    def gtk2(self, gtk2):
        """Sets the gtk2 of this GroupTransientKeys.

        Group Transient Key 2 (PAN wide)  # noqa: E501

        :param gtk2: The gtk2 of this GroupTransientKeys.  # noqa: E501
        :type: str
        """

        self._gtk2 = gtk2

    @property
    def gtk3(self):
        """Gets the gtk3 of this GroupTransientKeys.  # noqa: E501

        Group Transient Key 3 (PAN wide)  # noqa: E501

        :return: The gtk3 of this GroupTransientKeys.  # noqa: E501
        :rtype: str
        """
        return self._gtk3

    @gtk3.setter
    def gtk3(self, gtk3):
        """Sets the gtk3 of this GroupTransientKeys.

        Group Transient Key 3 (PAN wide)  # noqa: E501

        :param gtk3: The gtk3 of this GroupTransientKeys.  # noqa: E501
        :type: str
        """

        self._gtk3 = gtk3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupTransientKeys, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupTransientKeys):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
