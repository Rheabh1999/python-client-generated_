# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RouterConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'routing_method': 'int',
        'network_name': 'str',
        'pan_size_offset': 'int',
        'routing_cost_offset': 'int',
        'six_lowpan_mtu': 'int'
    }

    attribute_map = {
        'routing_method': 'routingMethod',
        'network_name': 'networkName',
        'pan_size_offset': 'panSizeOffset',
        'routing_cost_offset': 'routingCostOffset',
        'six_lowpan_mtu': 'sixLowpanMtu'
    }

    def __init__(self, routing_method=None, network_name=None, pan_size_offset=None, routing_cost_offset=None, six_lowpan_mtu=None):  # noqa: E501
        """RouterConfig - a model defined in Swagger"""  # noqa: E501

        self._routing_method = None
        self._network_name = None
        self._pan_size_offset = None
        self._routing_cost_offset = None
        self._six_lowpan_mtu = None
        self.discriminator = None

        self.routing_method = routing_method
        self.network_name = network_name
        self.pan_size_offset = pan_size_offset
        self.routing_cost_offset = routing_cost_offset
        if six_lowpan_mtu is not None:
            self.six_lowpan_mtu = six_lowpan_mtu

    @property
    def routing_method(self):
        """Gets the routing_method of this RouterConfig.  # noqa: E501

        Set as specified in the TPS PAN-IE description.  # noqa: E501

        :return: The routing_method of this RouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._routing_method

    @routing_method.setter
    def routing_method(self, routing_method):
        """Sets the routing_method of this RouterConfig.

        Set as specified in the TPS PAN-IE description.  # noqa: E501

        :param routing_method: The routing_method of this RouterConfig.  # noqa: E501
        :type: int
        """
        if routing_method is None:
            raise ValueError("Invalid value for `routing_method`, must not be `None`")  # noqa: E501

        self._routing_method = routing_method

    @property
    def network_name(self):
        """Gets the network_name of this RouterConfig.  # noqa: E501

        Set as specified in the TPS NETNAME-IE description.  # noqa: E501

        :return: The network_name of this RouterConfig.  # noqa: E501
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this RouterConfig.

        Set as specified in the TPS NETNAME-IE description.  # noqa: E501

        :param network_name: The network_name of this RouterConfig.  # noqa: E501
        :type: str
        """
        if network_name is None:
            raise ValueError("Invalid value for `network_name`, must not be `None`")  # noqa: E501

        self._network_name = network_name

    @property
    def pan_size_offset(self):
        """Gets the pan_size_offset of this RouterConfig.  # noqa: E501

        An offset to be added to the Pan Size advertised by this node.  # noqa: E501

        :return: The pan_size_offset of this RouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._pan_size_offset

    @pan_size_offset.setter
    def pan_size_offset(self, pan_size_offset):
        """Sets the pan_size_offset of this RouterConfig.

        An offset to be added to the Pan Size advertised by this node.  # noqa: E501

        :param pan_size_offset: The pan_size_offset of this RouterConfig.  # noqa: E501
        :type: int
        """
        if pan_size_offset is None:
            raise ValueError("Invalid value for `pan_size_offset`, must not be `None`")  # noqa: E501

        self._pan_size_offset = pan_size_offset

    @property
    def routing_cost_offset(self):
        """Gets the routing_cost_offset of this RouterConfig.  # noqa: E501

        An offset to be added to the Routing Cost advertised by this node.  # noqa: E501

        :return: The routing_cost_offset of this RouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._routing_cost_offset

    @routing_cost_offset.setter
    def routing_cost_offset(self, routing_cost_offset):
        """Sets the routing_cost_offset of this RouterConfig.

        An offset to be added to the Routing Cost advertised by this node.  # noqa: E501

        :param routing_cost_offset: The routing_cost_offset of this RouterConfig.  # noqa: E501
        :type: int
        """
        if routing_cost_offset is None:
            raise ValueError("Invalid value for `routing_cost_offset`, must not be `None`")  # noqa: E501

        self._routing_cost_offset = routing_cost_offset

    @property
    def six_lowpan_mtu(self):
        """Gets the six_lowpan_mtu of this RouterConfig.  # noqa: E501

        The 6LoWPAN MTU to be used by this router.  # noqa: E501

        :return: The six_lowpan_mtu of this RouterConfig.  # noqa: E501
        :rtype: int
        """
        return self._six_lowpan_mtu

    @six_lowpan_mtu.setter
    def six_lowpan_mtu(self, six_lowpan_mtu):
        """Sets the six_lowpan_mtu of this RouterConfig.

        The 6LoWPAN MTU to be used by this router.  # noqa: E501

        :param six_lowpan_mtu: The six_lowpan_mtu of this RouterConfig.  # noqa: E501
        :type: int
        """

        self._six_lowpan_mtu = six_lowpan_mtu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouterConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouterConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
