# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UDPDatagram(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'src_address': 'str',
        'src_port': 'int',
        'dest_address': 'str',
        'dest_port': 'int',
        'data': 'str',
        'frame_exchange_pattern': 'int'
    }

    attribute_map = {
        'src_address': 'srcAddress',
        'src_port': 'srcPort',
        'dest_address': 'destAddress',
        'dest_port': 'destPort',
        'data': 'data',
        'frame_exchange_pattern': 'frameExchangePattern'
    }

    def __init__(self, src_address=None, src_port=None, dest_address=None, dest_port=None, data=None, frame_exchange_pattern=None):  # noqa: E501
        """UDPDatagram - a model defined in Swagger"""  # noqa: E501

        self._src_address = None
        self._src_port = None
        self._dest_address = None
        self._dest_port = None
        self._data = None
        self._frame_exchange_pattern = None
        self.discriminator = None

        self.src_address = src_address
        self.src_port = src_port
        self.dest_address = dest_address
        self.dest_port = dest_port
        self.data = data
        self.frame_exchange_pattern = frame_exchange_pattern

    @property
    def src_address(self):
        """Gets the src_address of this UDPDatagram.  # noqa: E501

        The source address to be used by the sender.  Must be one of the LL, ULA, GUA, or mcast addresses configured on the node.  IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :return: The src_address of this UDPDatagram.  # noqa: E501
        :rtype: str
        """
        return self._src_address

    @src_address.setter
    def src_address(self, src_address):
        """Sets the src_address of this UDPDatagram.

        The source address to be used by the sender.  Must be one of the LL, ULA, GUA, or mcast addresses configured on the node.  IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :param src_address: The src_address of this UDPDatagram.  # noqa: E501
        :type: str
        """
        if src_address is None:
            raise ValueError("Invalid value for `src_address`, must not be `None`")  # noqa: E501

        self._src_address = src_address

    @property
    def src_port(self):
        """Gets the src_port of this UDPDatagram.  # noqa: E501

        The port from which the datagram will be sent.  # noqa: E501

        :return: The src_port of this UDPDatagram.  # noqa: E501
        :rtype: int
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this UDPDatagram.

        The port from which the datagram will be sent.  # noqa: E501

        :param src_port: The src_port of this UDPDatagram.  # noqa: E501
        :type: int
        """
        if src_port is None:
            raise ValueError("Invalid value for `src_port`, must not be `None`")  # noqa: E501

        self._src_port = src_port

    @property
    def dest_address(self):
        """Gets the dest_address of this UDPDatagram.  # noqa: E501

        The destination address to which the datagram will be sent.  IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :return: The dest_address of this UDPDatagram.  # noqa: E501
        :rtype: str
        """
        return self._dest_address

    @dest_address.setter
    def dest_address(self, dest_address):
        """Sets the dest_address of this UDPDatagram.

        The destination address to which the datagram will be sent.  IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :param dest_address: The dest_address of this UDPDatagram.  # noqa: E501
        :type: str
        """
        if dest_address is None:
            raise ValueError("Invalid value for `dest_address`, must not be `None`")  # noqa: E501

        self._dest_address = dest_address

    @property
    def dest_port(self):
        """Gets the dest_port of this UDPDatagram.  # noqa: E501

        The port to which the datagram will be sent.  # noqa: E501

        :return: The dest_port of this UDPDatagram.  # noqa: E501
        :rtype: int
        """
        return self._dest_port

    @dest_port.setter
    def dest_port(self, dest_port):
        """Sets the dest_port of this UDPDatagram.

        The port to which the datagram will be sent.  # noqa: E501

        :param dest_port: The dest_port of this UDPDatagram.  # noqa: E501
        :type: int
        """
        if dest_port is None:
            raise ValueError("Invalid value for `dest_port`, must not be `None`")  # noqa: E501

        self._dest_port = dest_port

    @property
    def data(self):
        """Gets the data of this UDPDatagram.  # noqa: E501

        The body of the UDP datagram encoded as a string of ASCII characters.  # noqa: E501

        :return: The data of this UDPDatagram.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UDPDatagram.

        The body of the UDP datagram encoded as a string of ASCII characters.  # noqa: E501

        :param data: The data of this UDPDatagram.  # noqa: E501
        :type: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def frame_exchange_pattern(self):
        """Gets the frame_exchange_pattern of this UDPDatagram.  # noqa: E501

        Set to 0 if DFE is to be used, set to 1 if EDFE is to be used.  # noqa: E501

        :return: The frame_exchange_pattern of this UDPDatagram.  # noqa: E501
        :rtype: int
        """
        return self._frame_exchange_pattern

    @frame_exchange_pattern.setter
    def frame_exchange_pattern(self, frame_exchange_pattern):
        """Sets the frame_exchange_pattern of this UDPDatagram.

        Set to 0 if DFE is to be used, set to 1 if EDFE is to be used.  # noqa: E501

        :param frame_exchange_pattern: The frame_exchange_pattern of this UDPDatagram.  # noqa: E501
        :type: int
        """
        if frame_exchange_pattern is None:
            raise ValueError("Invalid value for `frame_exchange_pattern`, must not be `None`")  # noqa: E501

        self._frame_exchange_pattern = frame_exchange_pattern

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UDPDatagram, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UDPDatagram):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
