# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PhyConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'modulation': 'int',
        'symbol_rate': 'int',
        'modulation_index': 'int'
    }

    attribute_map = {
        'modulation': 'modulation',
        'symbol_rate': 'symbolRate',
        'modulation_index': 'modulationIndex'
    }

    def __init__(self, modulation=None, symbol_rate=None, modulation_index=None):  # noqa: E501
        """PhyConfig - a model defined in Swagger"""  # noqa: E501

        self._modulation = None
        self._symbol_rate = None
        self._modulation_index = None
        self.discriminator = None

        self.modulation = modulation
        self.symbol_rate = symbol_rate
        self.modulation_index = modulation_index

    @property
    def modulation(self):
        """Gets the modulation of this PhyConfig.  # noqa: E501

        0 = 2FSK  # noqa: E501

        :return: The modulation of this PhyConfig.  # noqa: E501
        :rtype: int
        """
        return self._modulation

    @modulation.setter
    def modulation(self, modulation):
        """Sets the modulation of this PhyConfig.

        0 = 2FSK  # noqa: E501

        :param modulation: The modulation of this PhyConfig.  # noqa: E501
        :type: int
        """
        if modulation is None:
            raise ValueError("Invalid value for `modulation`, must not be `None`")  # noqa: E501

        self._modulation = modulation

    @property
    def symbol_rate(self):
        """Gets the symbol_rate of this PhyConfig.  # noqa: E501

        Symbols per second (ex 50000 for 50K)  # noqa: E501

        :return: The symbol_rate of this PhyConfig.  # noqa: E501
        :rtype: int
        """
        return self._symbol_rate

    @symbol_rate.setter
    def symbol_rate(self, symbol_rate):
        """Sets the symbol_rate of this PhyConfig.

        Symbols per second (ex 50000 for 50K)  # noqa: E501

        :param symbol_rate: The symbol_rate of this PhyConfig.  # noqa: E501
        :type: int
        """
        if symbol_rate is None:
            raise ValueError("Invalid value for `symbol_rate`, must not be `None`")  # noqa: E501

        self._symbol_rate = symbol_rate

    @property
    def modulation_index(self):
        """Gets the modulation_index of this PhyConfig.  # noqa: E501

        0 = 0.5, 1 = 1.0  # noqa: E501

        :return: The modulation_index of this PhyConfig.  # noqa: E501
        :rtype: int
        """
        return self._modulation_index

    @modulation_index.setter
    def modulation_index(self, modulation_index):
        """Sets the modulation_index of this PhyConfig.

        0 = 0.5, 1 = 1.0  # noqa: E501

        :param modulation_index: The modulation_index of this PhyConfig.  # noqa: E501
        :type: int
        """
        if modulation_index is None:
            raise ValueError("Invalid value for `modulation_index`, must not be `None`")  # noqa: E501

        self._modulation_index = modulation_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhyConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhyConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
