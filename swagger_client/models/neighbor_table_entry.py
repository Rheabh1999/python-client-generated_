# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NeighborTableEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eui64': 'str',
        'etx': 'int',
        'rsl': 'int',
        'rssi': 'int',
        'pan_size': 'int',
        'routing_cost': 'int',
        'ip_addresses': 'list[str]',
        'time_since_last_rx': 'int',
        'is_parent_status': 'int'
    }

    attribute_map = {
        'eui64': 'eui64',
        'etx': 'etx',
        'rsl': 'rsl',
        'rssi': 'rssi',
        'pan_size': 'panSize',
        'routing_cost': 'routingCost',
        'ip_addresses': 'ipAddresses',
        'time_since_last_rx': 'timeSinceLastRx',
        'is_parent_status': 'isParentStatus'
    }

    def __init__(self, eui64=None, etx=None, rsl=None, rssi=None, pan_size=None, routing_cost=None, ip_addresses=None, time_since_last_rx=None, is_parent_status=None):  # noqa: E501
        """NeighborTableEntry - a model defined in Swagger"""  # noqa: E501

        self._eui64 = None
        self._etx = None
        self._rsl = None
        self._rssi = None
        self._pan_size = None
        self._routing_cost = None
        self._ip_addresses = None
        self._time_since_last_rx = None
        self._is_parent_status = None
        self.discriminator = None

        self.eui64 = eui64
        self.etx = etx
        self.rsl = rsl
        self.rssi = rssi
        self.pan_size = pan_size
        self.routing_cost = routing_cost
        self.ip_addresses = ip_addresses
        self.time_since_last_rx = time_since_last_rx
        self.is_parent_status = is_parent_status

    @property
    def eui64(self):
        """Gets the eui64 of this NeighborTableEntry.  # noqa: E501

        The EUI64 of the neighbor node.  # noqa: E501

        :return: The eui64 of this NeighborTableEntry.  # noqa: E501
        :rtype: str
        """
        return self._eui64

    @eui64.setter
    def eui64(self, eui64):
        """Sets the eui64 of this NeighborTableEntry.

        The EUI64 of the neighbor node.  # noqa: E501

        :param eui64: The eui64 of this NeighborTableEntry.  # noqa: E501
        :type: str
        """
        if eui64 is None:
            raise ValueError("Invalid value for `eui64`, must not be `None`")  # noqa: E501

        self._eui64 = eui64

    @property
    def etx(self):
        """Gets the etx of this NeighborTableEntry.  # noqa: E501

        ETX EWMA of the neighbor node.  # noqa: E501

        :return: The etx of this NeighborTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._etx

    @etx.setter
    def etx(self, etx):
        """Sets the etx of this NeighborTableEntry.

        ETX EWMA of the neighbor node.  # noqa: E501

        :param etx: The etx of this NeighborTableEntry.  # noqa: E501
        :type: int
        """
        if etx is None:
            raise ValueError("Invalid value for `etx`, must not be `None`")  # noqa: E501

        self._etx = etx

    @property
    def rsl(self):
        """Gets the rsl of this NeighborTableEntry.  # noqa: E501

        RSL EWMA of the neighbor node.  # noqa: E501

        :return: The rsl of this NeighborTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._rsl

    @rsl.setter
    def rsl(self, rsl):
        """Sets the rsl of this NeighborTableEntry.

        RSL EWMA of the neighbor node.  # noqa: E501

        :param rsl: The rsl of this NeighborTableEntry.  # noqa: E501
        :type: int
        """
        if rsl is None:
            raise ValueError("Invalid value for `rsl`, must not be `None`")  # noqa: E501

        self._rsl = rsl

    @property
    def rssi(self):
        """Gets the rssi of this NeighborTableEntry.  # noqa: E501

        Raw RSSI for the neighbor node.  # noqa: E501

        :return: The rssi of this NeighborTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this NeighborTableEntry.

        Raw RSSI for the neighbor node.  # noqa: E501

        :param rssi: The rssi of this NeighborTableEntry.  # noqa: E501
        :type: int
        """
        if rssi is None:
            raise ValueError("Invalid value for `rssi`, must not be `None`")  # noqa: E501

        self._rssi = rssi

    @property
    def pan_size(self):
        """Gets the pan_size of this NeighborTableEntry.  # noqa: E501

        The node's reported PAN size.  # noqa: E501

        :return: The pan_size of this NeighborTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._pan_size

    @pan_size.setter
    def pan_size(self, pan_size):
        """Sets the pan_size of this NeighborTableEntry.

        The node's reported PAN size.  # noqa: E501

        :param pan_size: The pan_size of this NeighborTableEntry.  # noqa: E501
        :type: int
        """
        if pan_size is None:
            raise ValueError("Invalid value for `pan_size`, must not be `None`")  # noqa: E501

        self._pan_size = pan_size

    @property
    def routing_cost(self):
        """Gets the routing_cost of this NeighborTableEntry.  # noqa: E501

        The node's reported routing cost.  # noqa: E501

        :return: The routing_cost of this NeighborTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._routing_cost

    @routing_cost.setter
    def routing_cost(self, routing_cost):
        """Sets the routing_cost of this NeighborTableEntry.

        The node's reported routing cost.  # noqa: E501

        :param routing_cost: The routing_cost of this NeighborTableEntry.  # noqa: E501
        :type: int
        """
        if routing_cost is None:
            raise ValueError("Invalid value for `routing_cost`, must not be `None`")  # noqa: E501

        self._routing_cost = routing_cost

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this NeighborTableEntry.  # noqa: E501

        The IP addresses of the neighbor node. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :return: The ip_addresses of this NeighborTableEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this NeighborTableEntry.

        The IP addresses of the neighbor node. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :param ip_addresses: The ip_addresses of this NeighborTableEntry.  # noqa: E501
        :type: list[str]
        """
        if ip_addresses is None:
            raise ValueError("Invalid value for `ip_addresses`, must not be `None`")  # noqa: E501

        self._ip_addresses = ip_addresses

    @property
    def time_since_last_rx(self):
        """Gets the time_since_last_rx of this NeighborTableEntry.  # noqa: E501

        msec since last Rx from the neighbor node.  # noqa: E501

        :return: The time_since_last_rx of this NeighborTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._time_since_last_rx

    @time_since_last_rx.setter
    def time_since_last_rx(self, time_since_last_rx):
        """Sets the time_since_last_rx of this NeighborTableEntry.

        msec since last Rx from the neighbor node.  # noqa: E501

        :param time_since_last_rx: The time_since_last_rx of this NeighborTableEntry.  # noqa: E501
        :type: int
        """
        if time_since_last_rx is None:
            raise ValueError("Invalid value for `time_since_last_rx`, must not be `None`")  # noqa: E501

        self._time_since_last_rx = time_since_last_rx

    @property
    def is_parent_status(self):
        """Gets the is_parent_status of this NeighborTableEntry.  # noqa: E501

        The RPL parent status of the neighbor. 0 means the neighbor is not a RPL parent, 1 means the neighbor is a RPL parent, 2 means the neighbor is the preferred RPL parent.  # noqa: E501

        :return: The is_parent_status of this NeighborTableEntry.  # noqa: E501
        :rtype: int
        """
        return self._is_parent_status

    @is_parent_status.setter
    def is_parent_status(self, is_parent_status):
        """Sets the is_parent_status of this NeighborTableEntry.

        The RPL parent status of the neighbor. 0 means the neighbor is not a RPL parent, 1 means the neighbor is a RPL parent, 2 means the neighbor is the preferred RPL parent.  # noqa: E501

        :param is_parent_status: The is_parent_status of this NeighborTableEntry.  # noqa: E501
        :type: int
        """
        if is_parent_status is None:
            raise ValueError("Invalid value for `is_parent_status`, must not be `None`")  # noqa: E501

        self._is_parent_status = is_parent_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NeighborTableEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NeighborTableEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
