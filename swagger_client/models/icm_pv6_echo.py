# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ICMPv6Echo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'src_address': 'str',
        'dest_address': 'str',
        'hop_limit': 'int',
        'echo_body': 'str',
        'frame_exchange_pattern': 'int',
        'identifier': 'int',
        'sequence_number': 'int'
    }

    attribute_map = {
        'src_address': 'srcAddress',
        'dest_address': 'destAddress',
        'hop_limit': 'hopLimit',
        'echo_body': 'echoBody',
        'frame_exchange_pattern': 'frameExchangePattern',
        'identifier': 'identifier',
        'sequence_number': 'sequenceNumber'
    }

    def __init__(self, src_address=None, dest_address=None, hop_limit=None, echo_body=None, frame_exchange_pattern=None, identifier=None, sequence_number=None):  # noqa: E501
        """ICMPv6Echo - a model defined in Swagger"""  # noqa: E501

        self._src_address = None
        self._dest_address = None
        self._hop_limit = None
        self._echo_body = None
        self._frame_exchange_pattern = None
        self._identifier = None
        self._sequence_number = None
        self.discriminator = None

        self.src_address = src_address
        self.dest_address = dest_address
        self.hop_limit = hop_limit
        self.echo_body = echo_body
        self.frame_exchange_pattern = frame_exchange_pattern
        self.identifier = identifier
        self.sequence_number = sequence_number

    @property
    def src_address(self):
        """Gets the src_address of this ICMPv6Echo.  # noqa: E501

        The source address to be used by the sender.  Must be one of the LL, ULA, GUA, or mcast addresses configured on the node. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :return: The src_address of this ICMPv6Echo.  # noqa: E501
        :rtype: str
        """
        return self._src_address

    @src_address.setter
    def src_address(self, src_address):
        """Sets the src_address of this ICMPv6Echo.

        The source address to be used by the sender.  Must be one of the LL, ULA, GUA, or mcast addresses configured on the node. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :param src_address: The src_address of this ICMPv6Echo.  # noqa: E501
        :type: str
        """
        if src_address is None:
            raise ValueError("Invalid value for `src_address`, must not be `None`")  # noqa: E501

        self._src_address = src_address

    @property
    def dest_address(self):
        """Gets the dest_address of this ICMPv6Echo.  # noqa: E501

        The destination address to which the ICMPv6Echo message will be sent. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :return: The dest_address of this ICMPv6Echo.  # noqa: E501
        :rtype: str
        """
        return self._dest_address

    @dest_address.setter
    def dest_address(self, dest_address):
        """Sets the dest_address of this ICMPv6Echo.

        The destination address to which the ICMPv6Echo message will be sent. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :param dest_address: The dest_address of this ICMPv6Echo.  # noqa: E501
        :type: str
        """
        if dest_address is None:
            raise ValueError("Invalid value for `dest_address`, must not be `None`")  # noqa: E501

        self._dest_address = dest_address

    @property
    def hop_limit(self):
        """Gets the hop_limit of this ICMPv6Echo.  # noqa: E501

        The hop limit value to be set in the IPv6 header.  # noqa: E501

        :return: The hop_limit of this ICMPv6Echo.  # noqa: E501
        :rtype: int
        """
        return self._hop_limit

    @hop_limit.setter
    def hop_limit(self, hop_limit):
        """Sets the hop_limit of this ICMPv6Echo.

        The hop limit value to be set in the IPv6 header.  # noqa: E501

        :param hop_limit: The hop_limit of this ICMPv6Echo.  # noqa: E501
        :type: int
        """
        if hop_limit is None:
            raise ValueError("Invalid value for `hop_limit`, must not be `None`")  # noqa: E501

        self._hop_limit = hop_limit

    @property
    def echo_body(self):
        """Gets the echo_body of this ICMPv6Echo.  # noqa: E501

        The body of the ICMPv6Echo message encoded as a string of ASCII characters.  # noqa: E501

        :return: The echo_body of this ICMPv6Echo.  # noqa: E501
        :rtype: str
        """
        return self._echo_body

    @echo_body.setter
    def echo_body(self, echo_body):
        """Sets the echo_body of this ICMPv6Echo.

        The body of the ICMPv6Echo message encoded as a string of ASCII characters.  # noqa: E501

        :param echo_body: The echo_body of this ICMPv6Echo.  # noqa: E501
        :type: str
        """
        if echo_body is None:
            raise ValueError("Invalid value for `echo_body`, must not be `None`")  # noqa: E501

        self._echo_body = echo_body

    @property
    def frame_exchange_pattern(self):
        """Gets the frame_exchange_pattern of this ICMPv6Echo.  # noqa: E501

        Set to 0 if DFE is to be used, set to 1 if EDFE is to be used.  # noqa: E501

        :return: The frame_exchange_pattern of this ICMPv6Echo.  # noqa: E501
        :rtype: int
        """
        return self._frame_exchange_pattern

    @frame_exchange_pattern.setter
    def frame_exchange_pattern(self, frame_exchange_pattern):
        """Sets the frame_exchange_pattern of this ICMPv6Echo.

        Set to 0 if DFE is to be used, set to 1 if EDFE is to be used.  # noqa: E501

        :param frame_exchange_pattern: The frame_exchange_pattern of this ICMPv6Echo.  # noqa: E501
        :type: int
        """
        if frame_exchange_pattern is None:
            raise ValueError("Invalid value for `frame_exchange_pattern`, must not be `None`")  # noqa: E501

        self._frame_exchange_pattern = frame_exchange_pattern

    @property
    def identifier(self):
        """Gets the identifier of this ICMPv6Echo.  # noqa: E501

        Value to be placed in the ICMPv6 Echo Identifier field.  # noqa: E501

        :return: The identifier of this ICMPv6Echo.  # noqa: E501
        :rtype: int
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ICMPv6Echo.

        Value to be placed in the ICMPv6 Echo Identifier field.  # noqa: E501

        :param identifier: The identifier of this ICMPv6Echo.  # noqa: E501
        :type: int
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501
        if identifier is not None and identifier > 65535:  # noqa: E501
            raise ValueError("Invalid value for `identifier`, must be a value less than or equal to `65535`")  # noqa: E501
        if identifier is not None and identifier < 0:  # noqa: E501
            raise ValueError("Invalid value for `identifier`, must be a value greater than or equal to `0`")  # noqa: E501

        self._identifier = identifier

    @property
    def sequence_number(self):
        """Gets the sequence_number of this ICMPv6Echo.  # noqa: E501

        Value to be placed in the ICMPv6 Echo Sequence Number field.  # noqa: E501

        :return: The sequence_number of this ICMPv6Echo.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this ICMPv6Echo.

        Value to be placed in the ICMPv6 Echo Sequence Number field.  # noqa: E501

        :param sequence_number: The sequence_number of this ICMPv6Echo.  # noqa: E501
        :type: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501
        if sequence_number is not None and sequence_number > 65535:  # noqa: E501
            raise ValueError("Invalid value for `sequence_number`, must be a value less than or equal to `65535`")  # noqa: E501
        if sequence_number is not None and sequence_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `sequence_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sequence_number = sequence_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ICMPv6Echo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ICMPv6Echo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
