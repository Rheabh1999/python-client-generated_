# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class KeyLifetimes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pmk_lifetime': 'str',
        'ptk_lifetime': 'str',
        'gtk_lifetime': 'str',
        'gtk_new_activation_time': 'int',
        'revocation_lifetime_reduction': 'int'
    }

    attribute_map = {
        'pmk_lifetime': 'pmkLifetime',
        'ptk_lifetime': 'ptkLifetime',
        'gtk_lifetime': 'gtkLifetime',
        'gtk_new_activation_time': 'gtkNewActivationTime',
        'revocation_lifetime_reduction': 'revocationLifetimeReduction'
    }

    def __init__(self, pmk_lifetime=None, ptk_lifetime=None, gtk_lifetime=None, gtk_new_activation_time=None, revocation_lifetime_reduction=None):  # noqa: E501
        """KeyLifetimes - a model defined in Swagger"""  # noqa: E501

        self._pmk_lifetime = None
        self._ptk_lifetime = None
        self._gtk_lifetime = None
        self._gtk_new_activation_time = None
        self._revocation_lifetime_reduction = None
        self.discriminator = None

        if pmk_lifetime is not None:
            self.pmk_lifetime = pmk_lifetime
        if ptk_lifetime is not None:
            self.ptk_lifetime = ptk_lifetime
        if gtk_lifetime is not None:
            self.gtk_lifetime = gtk_lifetime
        if gtk_new_activation_time is not None:
            self.gtk_new_activation_time = gtk_new_activation_time
        if revocation_lifetime_reduction is not None:
            self.revocation_lifetime_reduction = revocation_lifetime_reduction

    @property
    def pmk_lifetime(self):
        """Gets the pmk_lifetime of this KeyLifetimes.  # noqa: E501

        PMK lifetime (minutes).  # noqa: E501

        :return: The pmk_lifetime of this KeyLifetimes.  # noqa: E501
        :rtype: str
        """
        return self._pmk_lifetime

    @pmk_lifetime.setter
    def pmk_lifetime(self, pmk_lifetime):
        """Sets the pmk_lifetime of this KeyLifetimes.

        PMK lifetime (minutes).  # noqa: E501

        :param pmk_lifetime: The pmk_lifetime of this KeyLifetimes.  # noqa: E501
        :type: str
        """

        self._pmk_lifetime = pmk_lifetime

    @property
    def ptk_lifetime(self):
        """Gets the ptk_lifetime of this KeyLifetimes.  # noqa: E501

        PTK lifetime (minutes).  # noqa: E501

        :return: The ptk_lifetime of this KeyLifetimes.  # noqa: E501
        :rtype: str
        """
        return self._ptk_lifetime

    @ptk_lifetime.setter
    def ptk_lifetime(self, ptk_lifetime):
        """Sets the ptk_lifetime of this KeyLifetimes.

        PTK lifetime (minutes).  # noqa: E501

        :param ptk_lifetime: The ptk_lifetime of this KeyLifetimes.  # noqa: E501
        :type: str
        """

        self._ptk_lifetime = ptk_lifetime

    @property
    def gtk_lifetime(self):
        """Gets the gtk_lifetime of this KeyLifetimes.  # noqa: E501

        GTK lifetime (minutes) for all GTKs.  # noqa: E501

        :return: The gtk_lifetime of this KeyLifetimes.  # noqa: E501
        :rtype: str
        """
        return self._gtk_lifetime

    @gtk_lifetime.setter
    def gtk_lifetime(self, gtk_lifetime):
        """Sets the gtk_lifetime of this KeyLifetimes.

        GTK lifetime (minutes) for all GTKs.  # noqa: E501

        :param gtk_lifetime: The gtk_lifetime of this KeyLifetimes.  # noqa: E501
        :type: str
        """

        self._gtk_lifetime = gtk_lifetime

    @property
    def gtk_new_activation_time(self):
        """Gets the gtk_new_activation_time of this KeyLifetimes.  # noqa: E501

        The time at which the Border Router activates the next GTK prior to expiration of the currently activated GTK.  Calculated as (1/gtkNewActivationTime) * GTK_EXPIRE_OFFSET.  # noqa: E501

        :return: The gtk_new_activation_time of this KeyLifetimes.  # noqa: E501
        :rtype: int
        """
        return self._gtk_new_activation_time

    @gtk_new_activation_time.setter
    def gtk_new_activation_time(self, gtk_new_activation_time):
        """Sets the gtk_new_activation_time of this KeyLifetimes.

        The time at which the Border Router activates the next GTK prior to expiration of the currently activated GTK.  Calculated as (1/gtkNewActivationTime) * GTK_EXPIRE_OFFSET.  # noqa: E501

        :param gtk_new_activation_time: The gtk_new_activation_time of this KeyLifetimes.  # noqa: E501
        :type: int
        """

        self._gtk_new_activation_time = gtk_new_activation_time

    @property
    def revocation_lifetime_reduction(self):
        """Gets the revocation_lifetime_reduction of this KeyLifetimes.  # noqa: E501

        Factor by which the active GTK lifetime is reduced during node revocation procedures.  Reduced lifetime is calculated as (1/revocationLifetimeReduction) * original lifetime.  # noqa: E501

        :return: The revocation_lifetime_reduction of this KeyLifetimes.  # noqa: E501
        :rtype: int
        """
        return self._revocation_lifetime_reduction

    @revocation_lifetime_reduction.setter
    def revocation_lifetime_reduction(self, revocation_lifetime_reduction):
        """Sets the revocation_lifetime_reduction of this KeyLifetimes.

        Factor by which the active GTK lifetime is reduced during node revocation procedures.  Reduced lifetime is calculated as (1/revocationLifetimeReduction) * original lifetime.  # noqa: E501

        :param revocation_lifetime_reduction: The revocation_lifetime_reduction of this KeyLifetimes.  # noqa: E501
        :type: int
        """

        self._revocation_lifetime_reduction = revocation_lifetime_reduction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyLifetimes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyLifetimes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
