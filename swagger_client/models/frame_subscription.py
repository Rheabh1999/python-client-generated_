# coding: utf-8

"""
    TBU API

    Test Bed Unit API. NOTE all IPv6 address strings are formatted per RFC 5952.  # noqa: E501

    OpenAPI spec version: 1.0.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FrameSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_mode': 'str',
        'fwd_address': 'str',
        'fwd_port': 'int'
    }

    attribute_map = {
        'subscription_mode': 'subscriptionMode',
        'fwd_address': 'fwdAddress',
        'fwd_port': 'fwdPort'
    }

    def __init__(self, subscription_mode=None, fwd_address=None, fwd_port=None):  # noqa: E501
        """FrameSubscription - a model defined in Swagger"""  # noqa: E501

        self._subscription_mode = None
        self._fwd_address = None
        self._fwd_port = None
        self.discriminator = None

        self.subscription_mode = subscription_mode
        self.fwd_address = fwd_address
        self.fwd_port = fwd_port

    @property
    def subscription_mode(self):
        """Gets the subscription_mode of this FrameSubscription.  # noqa: E501

        The listener starts or stops a frame subscription/forwarding. Start means start forwarding frames and Stop means cease forwarding frames.  If the node implements  /subscription/frames/hash, the node MUST maintain a SHA256 hash of all PCAPNG data forwarded between the acceptance of Start and Stop (inclusive), with this hash initialized to 0 upon reception of Start.  # noqa: E501

        :return: The subscription_mode of this FrameSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription_mode

    @subscription_mode.setter
    def subscription_mode(self, subscription_mode):
        """Sets the subscription_mode of this FrameSubscription.

        The listener starts or stops a frame subscription/forwarding. Start means start forwarding frames and Stop means cease forwarding frames.  If the node implements  /subscription/frames/hash, the node MUST maintain a SHA256 hash of all PCAPNG data forwarded between the acceptance of Start and Stop (inclusive), with this hash initialized to 0 upon reception of Start.  # noqa: E501

        :param subscription_mode: The subscription_mode of this FrameSubscription.  # noqa: E501
        :type: str
        """
        if subscription_mode is None:
            raise ValueError("Invalid value for `subscription_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["Start", "Stop"]  # noqa: E501
        if subscription_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(subscription_mode, allowed_values)
            )

        self._subscription_mode = subscription_mode

    @property
    def fwd_address(self):
        """Gets the fwd_address of this FrameSubscription.  # noqa: E501

        The IPv6 address of the listener. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :return: The fwd_address of this FrameSubscription.  # noqa: E501
        :rtype: str
        """
        return self._fwd_address

    @fwd_address.setter
    def fwd_address(self, fwd_address):
        """Sets the fwd_address of this FrameSubscription.

        The IPv6 address of the listener. IPv6 address strings are formatted per RFC 5952.  # noqa: E501

        :param fwd_address: The fwd_address of this FrameSubscription.  # noqa: E501
        :type: str
        """
        if fwd_address is None:
            raise ValueError("Invalid value for `fwd_address`, must not be `None`")  # noqa: E501

        self._fwd_address = fwd_address

    @property
    def fwd_port(self):
        """Gets the fwd_port of this FrameSubscription.  # noqa: E501

        The port number of the listener.  # noqa: E501

        :return: The fwd_port of this FrameSubscription.  # noqa: E501
        :rtype: int
        """
        return self._fwd_port

    @fwd_port.setter
    def fwd_port(self, fwd_port):
        """Sets the fwd_port of this FrameSubscription.

        The port number of the listener.  # noqa: E501

        :param fwd_port: The fwd_port of this FrameSubscription.  # noqa: E501
        :type: int
        """
        if fwd_port is None:
            raise ValueError("Invalid value for `fwd_port`, must not be `None`")  # noqa: E501

        self._fwd_port = fwd_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FrameSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FrameSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
